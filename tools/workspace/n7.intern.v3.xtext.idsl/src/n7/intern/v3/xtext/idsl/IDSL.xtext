// automatically generated by Xtext
grammar n7.intern.v3.xtext.idsl.IDsl with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.example.org/iDSL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

IotFramework:
	(	  dataflowdescriptors   += ThingBlock
		| dataflowdescriptors   += OutputBlock
		| dataflowdescriptors   += HolderBlock
		| interfacerdescriptors += SynchronizerBlock
		| interfacerdescriptors += PreProcessorBlock
		| interfacerdescriptors += DataProcessorBlock
	)*
	
	('@description''('description=STRING')')?
	 'configuration' name=ID '{' 
	(dataflows+=DefinitionInstruction
		| interfacers += SynchronizerAssignation 
		| interfacers += PreProcessorAssignation 
		| interfacers += ProcessorAssignation 
		| interfacers += OutputAssignation 
	)+ '}'
;
	
	

ThingBlock returns Thing:
		('@description''('description=STRING')')?
		'thing' name=ID '{' (connexions += ConnexionBlock | parameters += DomainParameterBlock | streamdescriptors += StreamDefinition )+ '}';

ConnexionBlock returns Connexion :
	('@description''('description=STRING')')?
	'connexion' name=ID '{' ( parameters += DomainParameterBlock )+ '}'
;

ParameterExpression returns Parameter:
	name=ID '=' (content=STRING|content= INT |content= NINT | content = BOOLEAN | content = FLOAT | content = CHAR | content = LONG | content = BYTE | content = DOUBLE) ';'
;

StreamDefinition returns StreamDescriptor:
	('@description''('description=STRING')')?
	'stream' name=ID 'of' type=Type '<' samplingRate=INT '>'';'
;

OutputBlock returns Output:
	('@description''('description=STRING')')?
	'output' name=ID '{'( parameters += DomainParameterBlock )+'}'
;
HolderBlock returns DataHolder:
	('@description''('description=STRING')')?
	'holder' name=ID '{'( parameters += DomainParameterBlock | streamdescriptors += StreamDefinition)+'}'
;

AnonymousStreamDefinition returns StreamDescriptor:
	'stream' name=ID 'of' type=Type
;

AnomynousHolder returns DataHolder:
	'['  (streamdescriptors += AnonymousStreamDefinition ',')* (streamdescriptors += AnonymousStreamDefinition) ']'
;

ReferenceName returns Reference :
	name=ID
;

PreProcessorBlock returns PreProcessorDescriptor:
	('@description''('description=STRING')')?
	'preprocessor' name=ID 
	'(' 
		(
			( inputdataflowdescriptors+=[DataFlowDescriptor] ',')+inputdataflowdescriptors+=[DataFlowDescriptor]
			| inputdataflowdescriptors+=[DataFlowDescriptor]
			| anomynousinputdataflowdescriptors+=AnomynousHolder
		)
		(','anomynousinputdataflowdescriptors+=AnomynousHolder)*
	')'':'
		 (
		 	( outputdataflowdescriptors+=[DataFlowDescriptor] ',')+outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| anomynousoutputdataflowdescriptors+=AnomynousHolder
		 )
		 ( ',' anomynousoutputdataflowdescriptors+=AnomynousHolder)* 
		 
	'{'( parameters += DomainParameterBlock )+ 
	'}'
;

DataProcessorBlock returns DataProcessorDescriptor:
	('@description''('description=STRING')')?
	'processor' name=ID 
	'(' 
		(
			( inputdataflowdescriptors+=[DataFlowDescriptor] ',')+inputdataflowdescriptors+=[DataFlowDescriptor]
			| inputdataflowdescriptors+=[DataFlowDescriptor]
			| anomynousinputdataflowdescriptors+=AnomynousHolder
		)
		(','anomynousinputdataflowdescriptors+=AnomynousHolder)*
	')'':'
		 (
		 	( outputdataflowdescriptors+=[DataFlowDescriptor] ',')+outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| anomynousoutputdataflowdescriptors+=AnomynousHolder
		 )
		 ( ',' anomynousoutputdataflowdescriptors+=AnomynousHolder)*
	 '{'( parameters += DomainParameterBlock )+ 
	 '}'
;

SynchronizerBlock returns SynchronizerDescriptor:
	('@description''('description=STRING')')?
	'synchronizer' name=ID 
	'(' 
		(
			( inputdataflowdescriptors+=[DataFlowDescriptor] ',')+inputdataflowdescriptors+=[DataFlowDescriptor]
			| inputdataflowdescriptors+=[DataFlowDescriptor]
			| anomynousinputdataflowdescriptors+=AnomynousHolder
		)
		(','anomynousinputdataflowdescriptors+=AnomynousHolder)*
	')'':'
		 (
		 	( outputdataflowdescriptors+=[DataFlowDescriptor] ',')+outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| outputdataflowdescriptors+=[DataFlowDescriptor]
		 	| anomynousoutputdataflowdescriptors+=AnomynousHolder
		 )
		 ( ',' anomynousoutputdataflowdescriptors+=AnomynousHolder)*
	 '{'( parameters += DomainParameterBlock )+ 
	  '}'
;

DefinitionInstruction returns DataFlow:
	'let' name=ID ('a' dataflowdescriptor=[DataFlowDescriptor])? ';'
;

PreProcessorAssignation returns PreProcessor:
	(outputs+=[DataFlow] ',')* outputs+=[DataFlow]  '=' 'pre'((inputs+=[DataFlow] ) ',')* (inputs+=[DataFlow]) 'using' interfacerdescriptor=[PreProcessorDescriptor] ';'
;

ProcessorAssignation returns DataProcessor:
	(outputs+=[DataFlow] ',')* outputs+=[DataFlow] '=' 'process' ((inputs+=[DataFlow] ) ',')* (inputs+=[DataFlow]) 'using' interfacerdescriptor=[DataProcessorDescriptor] ';'
;
SynchronizerAssignation returns Synchronizer:
	(outputs+=[DataFlow] ',')* outputs+=[DataFlow] '='  'synchronize' ((inputs+=[DataFlow]) ',')* (inputs+=[DataFlow]) 'using' interfacerdescriptor=[SynchronizerDescriptor] ';'
;

OutputAssignation returns Interfacer:
	(outputs+=[DataFlow] ',')*(outputs+=[DataFlow]) '=' ((inputs+=[DataFlow]) ',')* (inputs+=[DataFlow]) ';'
;
DomainParameterBlock returns DomainParameter:
	'@domain''('name=ID')' ('{'
		( parameters += ParameterExpression )+ 
	'}')?
;

enum Type :
	string='string'| byte = 'byte'| short = 'short'| int = 'int'| long = 'long'| float = 'float' | double = 'double' | char = 'char' | boolean = 'boolean'
;

terminal BOOLEAN returns ecore::EBoolean :
	'true' | 'false'	
;

terminal NINT returns ecore::EInt :
	'-' INT
;
terminal LONG returns ecore::EInt :
	(NINT|INT) ('l'|'L')
;
terminal FLOAT returns ecore::EFloat :
	(NINT|INT)('.'INT)?('f'|'F')
;
terminal DOUBLE returns ecore::EDouble :
	(NINT|INT)('.'INT)?('d'|'D')
;
terminal CHAR returns ecore::EChar:
	 "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") ) "'"
;


terminal BYTE returns ecore::EByte:
	'0x'((('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))
		|(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))
		|(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))
		|(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))(('a'..'z'|'A'..'Z'|'0'..'9')('a'..'z'|'A'..'Z'|'0'..'9'))
	)
;