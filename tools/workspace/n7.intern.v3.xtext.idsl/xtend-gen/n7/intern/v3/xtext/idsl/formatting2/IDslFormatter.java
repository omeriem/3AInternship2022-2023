/**
 * generated by Xtext 2.29.0
 */
package n7.intern.v3.xtext.idsl.formatting2;

import com.google.inject.Inject;
import iDSL.Connexion;
import iDSL.DataFlow;
import iDSL.DataFlowDescriptor;
import iDSL.DomainParameter;
import iDSL.Interfacer;
import iDSL.InterfacerDescriptor;
import iDSL.IotFramework;
import iDSL.StreamDescriptor;
import iDSL.Thing;
import java.util.Arrays;
import n7.intern.v3.xtext.idsl.services.IDslGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class IDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private IDslGrammarAccess _iDslGrammarAccess;

  protected void _format(final IotFramework iotFramework, @Extension final IFormattableDocument document) {
    EList<DataFlowDescriptor> _dataflowdescriptors = iotFramework.getDataflowdescriptors();
    for (final DataFlowDescriptor dataFlowDescriptor : _dataflowdescriptors) {
      document.<DataFlowDescriptor>format(dataFlowDescriptor);
    }
    EList<InterfacerDescriptor> _interfacerdescriptors = iotFramework.getInterfacerdescriptors();
    for (final InterfacerDescriptor interfacerDescriptor : _interfacerdescriptors) {
      document.<InterfacerDescriptor>format(interfacerDescriptor);
    }
    EList<DataFlow> _dataflows = iotFramework.getDataflows();
    for (final DataFlow dataFlow : _dataflows) {
      document.<DataFlow>format(dataFlow);
    }
    EList<Interfacer> _interfacers = iotFramework.getInterfacers();
    for (final Interfacer interfacer : _interfacers) {
      document.<Interfacer>format(interfacer);
    }
  }

  protected void _format(final Thing thing, @Extension final IFormattableDocument document) {
    EList<Connexion> _connexions = thing.getConnexions();
    for (final Connexion connexion : _connexions) {
      document.<Connexion>format(connexion);
    }
    EList<DomainParameter> _parameters = thing.getParameters();
    for (final DomainParameter parameter : _parameters) {
      document.<DomainParameter>format(parameter);
    }
    EList<StreamDescriptor> _streamdescriptors = thing.getStreamdescriptors();
    for (final StreamDescriptor streamDescriptor : _streamdescriptors) {
      document.<StreamDescriptor>format(streamDescriptor);
    }
  }

  public void format(final Object thing, final IFormattableDocument document) {
    if (thing instanceof XtextResource) {
      _format((XtextResource)thing, document);
      return;
    } else if (thing instanceof Thing) {
      _format((Thing)thing, document);
      return;
    } else if (thing instanceof IotFramework) {
      _format((IotFramework)thing, document);
      return;
    } else if (thing instanceof EObject) {
      _format((EObject)thing, document);
      return;
    } else if (thing == null) {
      _format((Void)null, document);
      return;
    } else if (thing != null) {
      _format(thing, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(thing, document).toString());
    }
  }
}
