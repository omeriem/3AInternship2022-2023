datatype Byte<1>
    @type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
  @js_type "byte"
	@java_primitive "true";

datatype Boolean<1>
    @type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "2"
	@java_type "boolean"
  @js_type "boolean"
	@java_primitive "true";

datatype Integer<2>
    @type_checker "Integer"
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
  @js_type "short"
	@java_primitive "true"
    @ros_type "int16";

datatype UInt8<1>
    @type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true";

datatype Int8<1>
    @type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "byte"
  @js_type "byte"
	@java_primitive "true";

datatype UInt16<2>
    @type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "short"
  @js_type "short"
	@java_primitive "true";

datatype Int16<2>
    @type_checker "Integer"
	@c_type "int"
    @c_byte_size "2"
	@java_type "short"
  @js_type "short"
	@java_primitive "true";

datatype UInt32<4>
    @type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
	@java_type "int"
  @js_type "int"
	@java_primitive "true";

datatype Int32<4>
    @type_checker "Integer"
	@c_type "int32_t"
	@c_byte_size "4"
	@java_type "int"
  @js_type "int"
	@java_primitive "true";

datatype UInt64<8>
    @type_checker "Integer"
	@c_type "uint64_t"
	@c_byte_size "8"
	@java_type "long"
  @js_type "long"
	@java_primitive "true";

datatype Int64<8>
    @type_checker "Integer"
	@c_type "int64_t"
	@c_byte_size "8"
	@java_type "long"
  @js_type "long"
	@java_primitive "true";


datatype Long<4>
    @type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
	@java_type "int"
  @js_type "int"
	@java_primitive "true";

datatype ULong<4>
    @type_checker "Integer"
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "int"
  @js_type "int"
	@java_primitive "true";

datatype Double<4>
    @type_checker "Real"
	@c_type "double"
	@c_byte_size "4"
	@java_type "float"
  @js_type "float"
	@java_primitive "true";

datatype Char<1>
    @type_checker "String"
	@c_type "char"
	@c_byte_size "1"
	@java_type "char"
    @js_type "char"
	@java_primitive "true";

object String
    @type_checker "String"
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
    @js_type "String"
    @SenML_type "String";

enumeration DigitalState
    @type_checker "Integer"
	@java_type "byte"
  @js_type "byte"
	@java_primitive "true"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}

datatype LongLong<8>
    @type_checker "Integer"
    @c_type "long long"
    @c_byte_size "8"
    @java_type "long"
    @js_type "long"
    @java_primitive "true";
thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel()@debug "false"; 
	// Notification that the timer has expired
	message timer_timeout();
}


thing fragment AnalogInputMsgs
{
message read_analog_input ();
message analog_input_value (value : Int16);
}
thing fragment AnalogInput includes AnalogInputMsgs {
provided port AnalogInput
{
receives read_analog_input
sends analog_input_value
}
}
thing PeriodicAnalogInput includes AnalogInputMsgs, TimerMsgs
{
readonly property refresh_rate : Long = 5000
provided port PeriodicAnalogInput
{
sends analog_input_value
}
required port Timer
{
receives timer_timeout
sends timer_start
}
required port AnalogInput
{
sends read_analog_input
receives analog_input_value
}
statechart PeriodicAnalogInputImpl init Running
{
state Running
{
on entry Timer!timer_start (refresh_rate)
transition wait -> Waiting
event Timer?timer_timeout
action AnalogInput!read_analog_input()
}
state Waiting
{
transition got -> Running
event m : AnalogInput?analog_input_value
action PeriodicAnalogInput!analog_input_value (m.value)
}
}
}
thing OnChangeAnalogInput includes AnalogInputMsgs, TimerMsgs
{
readonly property refresh_rate : UInt8 = 20
provided port OnChangeAnalogInput
{
sends analog_input_value
}
required port Timer
{
receives timer_timeout
sends timer_start
}
required port AnalogInput
{
sends read_analog_input
receives analog_input_value
}
statechart OnChangeAnalogInputImpl init Running
{
property oldValue : Int16 = -1
state Running
{
on entry Timer!timer_start (refresh_rate)
transition wait -> Waiting
event Timer?timer_timeout
action AnalogInput!read_analog_input()
}
state Waiting
{
transition -> Running
event m : AnalogInput?analog_input_value
action do
if (not (m.value == oldValue)) do
OnChangeAnalogInput!analog_input_value (m.value)
oldValue = m.value
end
end
}
}
}

