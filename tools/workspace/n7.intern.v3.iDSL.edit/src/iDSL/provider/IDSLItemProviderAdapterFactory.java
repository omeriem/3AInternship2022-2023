/**
 */
package iDSL.provider;

import iDSL.util.IDSLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IDSLItemProviderAdapterFactory extends IDSLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IDSLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.IotFramework} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IotFrameworkItemProvider iotFrameworkItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.IotFramework}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIotFrameworkAdapter() {
		if (iotFrameworkItemProvider == null) {
			iotFrameworkItemProvider = new IotFrameworkItemProvider(this);
		}

		return iotFrameworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataFlowDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowDescriptorItemProvider dataFlowDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataFlowDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowDescriptorAdapter() {
		if (dataFlowDescriptorItemProvider == null) {
			dataFlowDescriptorItemProvider = new DataFlowDescriptorItemProvider(this);
		}

		return dataFlowDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.StreamDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreamDescriptorItemProvider streamDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.StreamDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreamDescriptorAdapter() {
		if (streamDescriptorItemProvider == null) {
			streamDescriptorItemProvider = new StreamDescriptorItemProvider(this);
		}

		return streamDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Thing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingItemProvider thingItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Thing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingAdapter() {
		if (thingItemProvider == null) {
			thingItemProvider = new ThingItemProvider(this);
		}

		return thingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataCenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataCenterItemProvider dataCenterItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataCenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataCenterAdapter() {
		if (dataCenterItemProvider == null) {
			dataCenterItemProvider = new DataCenterItemProvider(this);
		}

		return dataCenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Connexion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnexionItemProvider connexionItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Connexion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnexionAdapter() {
		if (connexionItemProvider == null) {
			connexionItemProvider = new ConnexionItemProvider(this);
		}

		return connexionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataHolderItemProvider dataHolderItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataHolderAdapter() {
		if (dataHolderItemProvider == null) {
			dataHolderItemProvider = new DataHolderItemProvider(this);
		}

		return dataHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowItemProvider dataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowAdapter() {
		if (dataFlowItemProvider == null) {
			dataFlowItemProvider = new DataFlowItemProvider(this);
		}

		return dataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Stream} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreamItemProvider streamItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Stream}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreamAdapter() {
		if (streamItemProvider == null) {
			streamItemProvider = new StreamItemProvider(this);
		}

		return streamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.InterfacerDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfacerDescriptorItemProvider interfacerDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.InterfacerDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfacerDescriptorAdapter() {
		if (interfacerDescriptorItemProvider == null) {
			interfacerDescriptorItemProvider = new InterfacerDescriptorItemProvider(this);
		}

		return interfacerDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.SynchronizerDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizerDescriptorItemProvider synchronizerDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.SynchronizerDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizerDescriptorAdapter() {
		if (synchronizerDescriptorItemProvider == null) {
			synchronizerDescriptorItemProvider = new SynchronizerDescriptorItemProvider(this);
		}

		return synchronizerDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.PreProcessorDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreProcessorDescriptorItemProvider preProcessorDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.PreProcessorDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreProcessorDescriptorAdapter() {
		if (preProcessorDescriptorItemProvider == null) {
			preProcessorDescriptorItemProvider = new PreProcessorDescriptorItemProvider(this);
		}

		return preProcessorDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataProcessorDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataProcessorDescriptorItemProvider dataProcessorDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataProcessorDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataProcessorDescriptorAdapter() {
		if (dataProcessorDescriptorItemProvider == null) {
			dataProcessorDescriptorItemProvider = new DataProcessorDescriptorItemProvider(this);
		}

		return dataProcessorDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Interfacer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfacerItemProvider interfacerItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Interfacer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfacerAdapter() {
		if (interfacerItemProvider == null) {
			interfacerItemProvider = new InterfacerItemProvider(this);
		}

		return interfacerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.PreProcessor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreProcessorItemProvider preProcessorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.PreProcessor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreProcessorAdapter() {
		if (preProcessorItemProvider == null) {
			preProcessorItemProvider = new PreProcessorItemProvider(this);
		}

		return preProcessorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DataProcessor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataProcessorItemProvider dataProcessorItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DataProcessor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataProcessorAdapter() {
		if (dataProcessorItemProvider == null) {
			dataProcessorItemProvider = new DataProcessorItemProvider(this);
		}

		return dataProcessorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Synchronizer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizerItemProvider synchronizerItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Synchronizer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizerAdapter() {
		if (synchronizerItemProvider == null) {
			synchronizerItemProvider = new SynchronizerItemProvider(this);
		}

		return synchronizerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.DomainParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainParameterItemProvider domainParameterItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.DomainParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainParameterAdapter() {
		if (domainParameterItemProvider == null) {
			domainParameterItemProvider = new DomainParameterItemProvider(this);
		}

		return domainParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iDSL.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link iDSL.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (iotFrameworkItemProvider != null) iotFrameworkItemProvider.dispose();
		if (dataFlowDescriptorItemProvider != null) dataFlowDescriptorItemProvider.dispose();
		if (streamDescriptorItemProvider != null) streamDescriptorItemProvider.dispose();
		if (thingItemProvider != null) thingItemProvider.dispose();
		if (dataCenterItemProvider != null) dataCenterItemProvider.dispose();
		if (connexionItemProvider != null) connexionItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (dataHolderItemProvider != null) dataHolderItemProvider.dispose();
		if (dataFlowItemProvider != null) dataFlowItemProvider.dispose();
		if (streamItemProvider != null) streamItemProvider.dispose();
		if (interfacerDescriptorItemProvider != null) interfacerDescriptorItemProvider.dispose();
		if (synchronizerDescriptorItemProvider != null) synchronizerDescriptorItemProvider.dispose();
		if (preProcessorDescriptorItemProvider != null) preProcessorDescriptorItemProvider.dispose();
		if (dataProcessorDescriptorItemProvider != null) dataProcessorDescriptorItemProvider.dispose();
		if (interfacerItemProvider != null) interfacerItemProvider.dispose();
		if (preProcessorItemProvider != null) preProcessorItemProvider.dispose();
		if (dataProcessorItemProvider != null) dataProcessorItemProvider.dispose();
		if (synchronizerItemProvider != null) synchronizerItemProvider.dispose();
		if (domainParameterItemProvider != null) domainParameterItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
	}

}
