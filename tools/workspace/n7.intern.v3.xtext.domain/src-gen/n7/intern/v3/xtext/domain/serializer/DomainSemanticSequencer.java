/*
 * generated by Xtext 2.29.0
 */
package n7.intern.v3.xtext.domain.serializer;

import Domain.AssignationMarker;
import Domain.DomainFramework;
import Domain.DomainPackage;
import Domain.FunctionBlock;
import Domain.FunctionDefinition;
import Domain.FunctionMarker;
import Domain.FunctionValue;
import Domain.Import;
import Domain.Instruction;
import Domain.Reference;
import Domain.Setup;
import com.google.inject.Inject;
import java.util.Set;
import n7.intern.v3.xtext.domain.services.DomainGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DomainSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DomainGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainPackage.ASSIGNATION_MARKER:
				sequence_AssignationMarker(context, (AssignationMarker) semanticObject); 
				return; 
			case DomainPackage.DOMAIN_FRAMEWORK:
				sequence_DomainFramework(context, (DomainFramework) semanticObject); 
				return; 
			case DomainPackage.FUNCTION_BLOCK:
				sequence_FunctionBlock(context, (FunctionBlock) semanticObject); 
				return; 
			case DomainPackage.FUNCTION_DEFINITION:
				sequence_FunctionDefinition(context, (FunctionDefinition) semanticObject); 
				return; 
			case DomainPackage.FUNCTION_MARKER:
				sequence_FunctionMarker(context, (FunctionMarker) semanticObject); 
				return; 
			case DomainPackage.FUNCTION_VALUE:
				sequence_FunctionValue(context, (FunctionValue) semanticObject); 
				return; 
			case DomainPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case DomainPackage.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case DomainPackage.PARAMETER:
				if (rule == grammarAccess.getFunctionParameterRule()) {
					sequence_FunctionParameter(context, (Domain.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypedParameterRule()) {
					sequence_TypedParameter(context, (Domain.Parameter) semanticObject); 
					return; 
				}
				else break;
			case DomainPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case DomainPackage.SETUP:
				sequence_Setup(context, (Setup) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AssignationMarker returns AssignationMarker
	 *
	 * Constraint:
	 *     name=MarkerID
	 * </pre>
	 */
	protected void sequence_AssignationMarker(ISerializationContext context, AssignationMarker semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.MARKER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.MARKER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignationMarkerAccess().getNameMarkerIDEnumRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DomainFramework returns DomainFramework
	 *
	 * Constraint:
	 *     (description=STRING? name=ID setup=Setup? function_definitions+=FunctionDefinition* (parameters+=TypedParameter | parameters+=FunctionParameter)*)
	 * </pre>
	 */
	protected void sequence_DomainFramework(ISerializationContext context, DomainFramework semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FunctionBlock returns FunctionBlock
	 *
	 * Constraint:
	 *     (parameters+=ID? (parameters+=DEFAULT_PARAMETER? parameters+=ID?)* (parameters+=ID | parameters+=DEFAULT_PARAMETER))?
	 * </pre>
	 */
	protected void sequence_FunctionBlock(ISerializationContext context, FunctionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FunctionDefinition returns FunctionDefinition
	 *
	 * Constraint:
	 *     (description=STRING? name=ID (inputs+=Type* inputs+=Type)? (outputs+=Type* outputs+=Type)? values+=FunctionValue+)
	 * </pre>
	 */
	protected void sequence_FunctionDefinition(ISerializationContext context, FunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FunctionMarker returns FunctionMarker
	 *
	 * Constraint:
	 *     (name=MarkerID block=FunctionBlock)
	 * </pre>
	 */
	protected void sequence_FunctionMarker(ISerializationContext context, FunctionMarker semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.MARKER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.MARKER__NAME));
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.FUNCTION_MARKER__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.FUNCTION_MARKER__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionMarkerAccess().getNameMarkerIDEnumRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionMarkerAccess().getBlockFunctionBlockParserRuleCall_5_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FunctionParameter returns Parameter
	 *
	 * Constraint:
	 *     (description=STRING? function_type=[FunctionDefinition|ID] name=ID default_function_value=QUALIFIED_NAME? markers+=FunctionMarker*)
	 * </pre>
	 */
	protected void sequence_FunctionParameter(ISerializationContext context, Domain.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FunctionValue returns FunctionValue
	 *
	 * Constraint:
	 *     (name=ID instructions+=Instruction+)
	 * </pre>
	 */
	protected void sequence_FunctionValue(ISerializationContext context, FunctionValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (language=Language importID=ID references+=Reference* references+=Reference)
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (language=Language importID=ID functionName=ID)
	 * </pre>
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.INSTRUCTION__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.INSTRUCTION__LANGUAGE));
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.INSTRUCTION__IMPORT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.INSTRUCTION__IMPORT_ID));
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.INSTRUCTION__FUNCTION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.INSTRUCTION__FUNCTION_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstructionAccess().getLanguageLanguageEnumRuleCall_1_0(), semanticObject.getLanguage());
		feeder.accept(grammarAccess.getInstructionAccess().getImportIDIDTerminalRuleCall_3_0(), semanticObject.getImportID());
		feeder.accept(grammarAccess.getInstructionAccess().getFunctionNameIDTerminalRuleCall_5_0(), semanticObject.getFunctionName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainPackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainPackage.Literals.REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Setup returns Setup
	 *
	 * Constraint:
	 *     imports+=Import+
	 * </pre>
	 */
	protected void sequence_Setup(ISerializationContext context, Setup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypedParameter returns Parameter
	 *
	 * Constraint:
	 *     (
	 *         description=STRING? 
	 *         type=Type 
	 *         name=ID 
	 *         (
	 *             default_value=STRING | 
	 *             default_value=INT | 
	 *             default_value=NINT | 
	 *             default_value=BOOLEAN | 
	 *             default_value=FLOAT | 
	 *             default_value=CHAR | 
	 *             default_value=LONG | 
	 *             default_value=BYTE | 
	 *             default_value=DOUBLE
	 *         )? 
	 *         markers+=AssignationMarker*
	 *     )
	 * </pre>
	 */
	protected void sequence_TypedParameter(ISerializationContext context, Domain.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
