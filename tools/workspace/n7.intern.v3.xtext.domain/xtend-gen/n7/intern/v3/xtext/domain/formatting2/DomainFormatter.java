/**
 * generated by Xtext 2.29.0
 */
package n7.intern.v3.xtext.domain.formatting2;

import Domain.DomainFramework;
import Domain.FunctionDefinition;
import Domain.Marker;
import Domain.Parameter;
import Domain.Setup;
import com.google.inject.Inject;
import java.util.Arrays;
import n7.intern.v3.xtext.domain.services.DomainGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DomainFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DomainGrammarAccess _domainGrammarAccess;

  protected void _format(final DomainFramework domainFramework, @Extension final IFormattableDocument document) {
    document.<Setup>format(domainFramework.getSetup());
    EList<FunctionDefinition> _function_definitions = domainFramework.getFunction_definitions();
    for (final FunctionDefinition functionDefinition : _function_definitions) {
      document.<FunctionDefinition>format(functionDefinition);
    }
    EList<Parameter> _parameters = domainFramework.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
  }

  protected void _format(final Parameter parameter, @Extension final IFormattableDocument document) {
    EList<Marker> _markers = parameter.getMarkers();
    for (final Marker marker : _markers) {
      document.<Marker>format(marker);
    }
  }

  public void format(final Object domainFramework, final IFormattableDocument document) {
    if (domainFramework instanceof XtextResource) {
      _format((XtextResource)domainFramework, document);
      return;
    } else if (domainFramework instanceof DomainFramework) {
      _format((DomainFramework)domainFramework, document);
      return;
    } else if (domainFramework instanceof Parameter) {
      _format((Parameter)domainFramework, document);
      return;
    } else if (domainFramework instanceof EObject) {
      _format((EObject)domainFramework, document);
      return;
    } else if (domainFramework == null) {
      _format((Void)null, document);
      return;
    } else if (domainFramework != null) {
      _format(domainFramework, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(domainFramework, document).toString());
    }
  }
}
